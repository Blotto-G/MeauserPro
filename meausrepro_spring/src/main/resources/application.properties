spring.application.name=meausrepro_spring
server.port=8080


# MySQL 데이터베이스 설정
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.datasource.url=jdbc:mysql://58.239.58.243:3306/java405_team3_final?characterEncoding=UTF-8&serverTimezone=UTC
#spring.datasource.username=java405_team3_final
#spring.datasource.password=java405_team3_final_1234
spring.datasource.url=jdbc:mysql://localhost:3306/testdb1?characterEncoding=UTF-8&serverTimezone=UTC
spring.datasource.username=test1
spring.datasource.password=full405
spring.datasource.hikari.connection-test-query=SELECT 1

# JPA 설정
spring.jpa.database=mysql
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
# 자동 초기화 기능
spring.jpa.generate-ddl=true
# generate-ddl 옵션과 함께 사용
# 프로그램 시작 시 데이터베이스 생성 방식 결정
# 실제 운영 환경에서 create, create-drop, update 절대 사용 x (기존 데이터 삭제됨)
# create : 기존 테이블 삭제 후 테이블 생성. 개발 초기 단계에서 사용
# create-drop : 테이블 생성 후 종료 직전 삭제. 개발 초기 단계에서 사용
# validate : Entity 와 테이블 정상적으로 매핑되었는지 확인 (실제 운영 환경 or 테스트 서버에서 사용)
# update : 테이블 변경 사항 있을 경우 수정 (개발 중간 단계 or 테스트 서버에서 사용)
# none : 아무 작업 하지 않음 (실제 운영 환경에서 사용)
spring.jpa.hibernate.ddl-auto=update

# 스프링 프레임워크 resources 폴더 아래 schema.sql, data.sql 있을 경우, 해당 파일의 SQL 쿼리문 실행
# schema.sql : ddl(데이터 정의어) 명령 입력
# data.sql : dml(데이터 조작어) 명령 입력
# always : MySQL, Oracle 과 같은 외부 데이터베이스 사용
# embedded : 스프링 내장 데이터베이스 사용
# never : SQL 초기화 x
spring.sql.init.mode=never
# resources 폴더 아래 schema.sql, data.sql 와 spring.jpa.hibernate.ddl-auto 설정이 동시 존재할 때, SQL 파일 먼저 실행 후 JPA 에 의한 데이터베이스 생성 나중에 실행
spring.jpa.defer-datasource-initialization=true
# JPA 에서 실행되는 SQL 쿼리문을 출력 (콘솔창에서 확인 가능)
spring.jpa.show-sql=true
# JPA 에서 실행되는 SQL 쿼리문 포맷팅
spring.jpa.properties.hibernate.format_sql=true